openapi: 3.1.0
info:
  title: Beauty Clinic Care API
  description: Complete API specification reconciled with frontend requirements
  version: 1.0.0
  contact:
    name: API Team
    email: api@beautyclinic.com

servers:
  - url: http://localhost:4000/api/v1
    description: Development server
  - url: https://api.beautyclinic.com/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User and admin authentication endpoints
  - name: Services
    description: Public service catalog
  - name: Branches
    description: Public branch information
  - name: Bookings
    description: Appointment booking and management
  - name: Admin - Appointments
    description: Admin appointment management
  - name: Admin - Customers
    description: Admin customer management
  - name: Admin - Staff
    description: Admin staff management
  - name: Admin - Services
    description: Admin service CRUD
  - name: Admin - Branches
    description: Admin branch CRUD
  - name: Admin - Reviews
    description: Admin review moderation
  - name: Admin - Blog
    description: Admin blog management
  - name: Admin - Payments
    description: Admin payment operations
  - name: Admin - Dashboard
    description: Admin dashboard and metrics
  - name: Admin - Uploads
    description: File upload operations

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Common Schemas
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
            - code
          properties:
            message:
              type: string
            code:
              type: string
            details:
              type: object

    PaginationMeta:
      type: object
      required:
        - page
        - limit
        - total
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0

    # User & Auth Schemas
    User:
      type: object
      required:
        - id
        - name
        - email
        - role
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [client, admin]

    AuthResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - user
            - token
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
            expiresAt:
              type: string
              format: date-time

    # Service Schemas
    Service:
      type: object
      required:
        - id
        - name
        - category
        - description
        - duration
        - price
        - image
        - active
      properties:
        id:
          type: number
        name:
          type: string
        category:
          type: string
        description:
          type: string
        duration:
          type: string
        price:
          type: number
        image:
          type: string
          format: uri
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Branch Schemas
    Branch:
      type: object
      required:
        - id
        - name
        - address
        - phone
        - email
        - hours
        - image
        - location
        - services
      properties:
        id:
          type: number
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        hours:
          type: string
        image:
          type: string
          format: uri
        location:
          type: object
          required:
            - lat
            - lng
          properties:
            lat:
              type: number
              format: double
            lng:
              type: number
              format: double
        services:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Appointment/Booking Schemas
    Appointment:
      type: object
      required:
        - id
        - customerName
        - customerEmail
        - customerPhone
        - service
        - therapist
        - branch
        - date
        - time
        - duration
        - status
        - paymentStatus
        - price
      properties:
        id:
          type: number
        customerName:
          type: string
        customerEmail:
          type: string
          format: email
        customerPhone:
          type: string
        service:
          type: string
        therapist:
          type: string
        branch:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
        duration:
          type: string
        status:
          type: string
          enum: [confirmed, pending, completed, cancelled]
        paymentStatus:
          type: string
          enum: [paid, unpaid, refunded]
        price:
          type: number
        notes:
          type: string
        customerId:
          type: number
          nullable: true

    # Customer Schemas
    Customer:
      type: object
      required:
        - id
        - name
        - email
        - phone
        - dateJoined
        - totalVisits
        - totalSpent
        - lastVisit
        - notes
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        dateJoined:
          type: string
          format: date
        totalVisits:
          type: number
        totalSpent:
          type: number
        lastVisit:
          type: string
          format: date
        notes:
          type: string
        avatar:
          type: string
          format: uri
          nullable: true
        membershipTier:
          type: string
          enum: [New, Silver, Gold, VIP]
          nullable: true

    # Staff Schemas
    Staff:
      type: object
      required:
        - id
        - name
        - role
        - email
        - phone
        - branch
        - specialties
        - image
        - rating
        - totalBookings
        - active
      properties:
        id:
          type: number
        name:
          type: string
        role:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        branch:
          type: string
        specialties:
          type: array
          items:
            type: string
        image:
          type: string
          format: uri
        rating:
          type: number
          format: double
        totalBookings:
          type: number
        active:
          type: boolean

    # Review Schemas
    Review:
      type: object
      required:
        - id
        - customerName
        - service
        - rating
        - comment
        - date
        - branch
      properties:
        id:
          type: number
        customerName:
          type: string
        customerAvatar:
          type: string
          format: uri
          nullable: true
        service:
          type: string
        rating:
          type: number
          minimum: 1
          maximum: 5
        comment:
          type: string
        date:
          type: string
          format: date
        branch:
          type: string
        reply:
          type: string
          nullable: true
        replyDate:
          type: string
          format: date
          nullable: true
        status:
          type: string
          enum: [pending, approved, rejected]

    # Blog Post Schemas
    BlogPost:
      type: object
      required:
        - id
        - title
        - slug
        - excerpt
        - content
        - category
        - author
        - image
        - date
        - readTime
        - views
        - published
        - tags
      properties:
        id:
          type: number
        title:
          type: string
        slug:
          type: string
        excerpt:
          type: string
        content:
          type: string
        category:
          type: string
        author:
          type: string
        authorAvatar:
          type: string
          format: uri
          nullable: true
        image:
          type: string
          format: uri
        date:
          type: string
          format: date
        readTime:
          type: string
        views:
          type: number
        published:
          type: boolean
        tags:
          type: array
          items:
            type: string

    # Payment Schemas
    Payment:
      type: object
      required:
        - id
        - appointmentId
        - customerName
        - amount
        - method
        - status
        - date
        - transactionId
        - service
      properties:
        id:
          type: number
        appointmentId:
          type: number
        customerName:
          type: string
        customerEmail:
          type: string
          format: email
        amount:
          type: number
        method:
          type: string
        status:
          type: string
          enum: [completed, pending, refunded, failed]
        date:
          type: string
          format: date
        transactionId:
          type: string
        service:
          type: string
        refundAmount:
          type: number
          nullable: true
        refundReason:
          type: string
          nullable: true
        refundDate:
          type: string
          format: date-time
          nullable: true

    # Dashboard Schemas
    DashboardMetrics:
      type: object
      required:
        - totalRevenue
        - totalBookings
        - totalCustomers
        - pendingReviews
        - revenueChange
        - bookingsChange
        - customersChange
        - recentBookings
      properties:
        totalRevenue:
          type: number
        totalBookings:
          type: number
        totalCustomers:
          type: number
        pendingReviews:
          type: number
        revenueChange:
          type: number
        bookingsChange:
          type: number
        customersChange:
          type: number
        recentBookings:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              customerName:
                type: string
              service:
                type: string
              date:
                type: string
              status:
                type: string

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new client account
      operationId: registerClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - phone
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login with email and password
      operationId: loginClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/google:
    post:
      tags:
        - Authentication
      summary: Login with Google OAuth
      operationId: loginGoogleClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - credential
                - provider
              properties:
                credential:
                  type: string
                  description: Google JWT token
                provider:
                  type: string
                  enum: [google]
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout current session
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string

  /admin/auth/login:
    post:
      tags:
        - Authentication
      summary: Admin login with email and password
      operationId: loginAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /admin/auth/google:
    post:
      tags:
        - Authentication
      summary: Admin login with Google OAuth (domain whitelist)
      operationId: loginGoogleAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - credential
                - provider
              properties:
                credential:
                  type: string
                provider:
                  type: string
                  enum: [google-admin]
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  # Services Endpoints
  /services:
    get:
      tags:
        - Services
      summary: List all services
      operationId: listServices
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: active
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Services list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /services/{id}:
    get:
      tags:
        - Services
      summary: Get service by ID
      operationId: getService
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'

  # Branches Endpoints
  /branches:
    get:
      tags:
        - Branches
      summary: List all branches
      operationId: listBranches
      responses:
        '200':
          description: Branches list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Branch'

  # Bookings Endpoints
  /bookings:
    post:
      tags:
        - Bookings
      summary: Create new booking
      operationId: createBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerName
                - customerEmail
                - customerPhone
                - service
                - therapist
                - branch
                - date
                - time
                - duration
                - price
              properties:
                customerName:
                  type: string
                customerEmail:
                  type: string
                customerPhone:
                  type: string
                service:
                  type: string
                therapist:
                  type: string
                branch:
                  type: string
                date:
                  type: string
                time:
                  type: string
                duration:
                  type: string
                price:
                  type: number
                notes:
                  type: string
                customerId:
                  type: number
                  nullable: true
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appointment'

  # Admin - Appointments
  /admin/appointments:
    get:
      tags:
        - Admin - Appointments
      summary: List all appointments
      operationId: listAdminAppointments
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: branch
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [confirmed, pending, completed, cancelled]
        - name: q
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Appointments list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /admin/appointments/{id}:
    patch:
      tags:
        - Admin - Appointments
      summary: Update appointment status
      operationId: updateAppointment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [confirmed, pending, completed, cancelled]
      responses:
        '200':
          description: Appointment updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      status:
                        type: string
                      updatedAt:
                        type: string
                        format: date-time
    delete:
      tags:
        - Admin - Appointments
      summary: Delete appointment
      operationId: deleteAppointment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Appointment deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string

  # Admin - Customers
  /admin/customers:
    get:
      tags:
        - Admin - Customers
      summary: List all customers
      operationId: listCustomers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: q
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Customers list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
    post:
      tags:
        - Admin - Customers
      summary: Create new customer
      operationId: createCustomer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - phone
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                notes:
                  type: string
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Customer'

  /admin/customers/{id}:
    patch:
      tags:
        - Admin - Customers
      summary: Update customer
      operationId: updateCustomer
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                notes:
                  type: string
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Customer'
    delete:
      tags:
        - Admin - Customers
      summary: Delete customer
      operationId: deleteCustomer
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Customer deleted

  # Admin - Staff
  /admin/staff:
    get:
      tags:
        - Admin - Staff
      summary: List all staff
      operationId: listStaff
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Staff list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Staff'
    post:
      tags:
        - Admin - Staff
      summary: Create new staff
      operationId: createStaff
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - role
                - email
                - phone
                - branch
                - specialties
                - image
                - active
              properties:
                name:
                  type: string
                role:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                branch:
                  type: string
                specialties:
                  type: array
                  items:
                    type: string
                image:
                  type: string
                active:
                  type: boolean
      responses:
        '201':
          description: Staff created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Staff'

  /admin/staff/{id}:
    patch:
      tags:
        - Admin - Staff
      summary: Update staff
      operationId: updateStaff
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Staff'
      responses:
        '200':
          description: Staff updated
    delete:
      tags:
        - Admin - Staff
      summary: Delete staff
      operationId: deleteStaff
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Staff deleted

  # Admin - Services
  /admin/services:
    get:
      tags:
        - Admin - Services
      summary: List all services (admin view)
      operationId: listAdminServices
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: active
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Services list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
    post:
      tags:
        - Admin - Services
      summary: Create new service
      operationId: createService
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - category
                - description
                - duration
                - price
                - image
                - active
              properties:
                name:
                  type: string
                category:
                  type: string
                description:
                  type: string
                duration:
                  type: string
                price:
                  type: number
                image:
                  type: string
                active:
                  type: boolean
      responses:
        '201':
          description: Service created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'

  /admin/services/{id}:
    patch:
      tags:
        - Admin - Services
      summary: Update service
      operationId: updateService
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service updated
    delete:
      tags:
        - Admin - Services
      summary: Delete service
      operationId: deleteService
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Service deleted

  # Admin - Branches
  /admin/branches:
    get:
      tags:
        - Admin - Branches
      summary: List all branches (admin view)
      operationId: listAdminBranches
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Branches list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Branch'
    post:
      tags:
        - Admin - Branches
      summary: Create new branch
      operationId: createBranch
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Branch'
      responses:
        '201':
          description: Branch created

  /admin/branches/{id}:
    patch:
      tags:
        - Admin - Branches
      summary: Update branch
      operationId: updateBranch
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Branch'
      responses:
        '200':
          description: Branch updated
    delete:
      tags:
        - Admin - Branches
      summary: Delete branch
      operationId: deleteBranch
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Branch deleted

  # Reviews
  /reviews:
    get:
      tags:
        - Admin - Reviews
      summary: List reviews (public)
      operationId: listReviews
      parameters:
        - name: serviceId
          in: query
          schema:
            type: number
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Reviews list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
    post:
      tags:
        - Admin - Reviews
      summary: Create review
      operationId: createReview
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerName
                - customerEmail
                - service
                - rating
                - comment
                - branch
              properties:
                customerName:
                  type: string
                customerEmail:
                  type: string
                service:
                  type: string
                rating:
                  type: number
                comment:
                  type: string
                branch:
                  type: string
      responses:
        '201':
          description: Review created

  /admin/reviews:
    get:
      tags:
        - Admin - Reviews
      summary: List reviews (admin)
      operationId: listAdminReviews
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Reviews list

  /admin/reviews/{id}:
    patch:
      tags:
        - Admin - Reviews
      summary: Update review (add reply)
      operationId: updateReview
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reply:
                  type: string
      responses:
        '200':
          description: Review updated
    delete:
      tags:
        - Admin - Reviews
      summary: Delete review
      operationId: deleteReview
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Review deleted

  # Blog Posts
  /blog/posts:
    get:
      tags:
        - Admin - Blog
      summary: List blog posts (public)
      operationId: listBlogPosts
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: published
          in: query
          schema:
            type: boolean
            default: true
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Blog posts list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BlogPost'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /blog/posts/{slug}:
    get:
      tags:
        - Admin - Blog
      summary: Get blog post by slug
      operationId: getBlogPost
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Blog post details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BlogPost'

  /admin/blog/posts:
    get:
      tags:
        - Admin - Blog
      summary: List blog posts (admin)
      operationId: listAdminBlogPosts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Blog posts list
    post:
      tags:
        - Admin - Blog
      summary: Create blog post
      operationId: createBlogPost
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - slug
                - excerpt
                - content
                - category
                - author
                - image
                - published
                - tags
              properties:
                title:
                  type: string
                slug:
                  type: string
                excerpt:
                  type: string
                content:
                  type: string
                category:
                  type: string
                author:
                  type: string
                image:
                  type: string
                published:
                  type: boolean
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Blog post created

  /admin/blog/posts/{id}:
    patch:
      tags:
        - Admin - Blog
      summary: Update blog post
      operationId: updateBlogPost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '200':
          description: Blog post updated
    delete:
      tags:
        - Admin - Blog
      summary: Delete blog post
      operationId: deleteBlogPost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Blog post deleted

  # Payments
  /admin/payments:
    get:
      tags:
        - Admin - Payments
      summary: List payments
      operationId: listPayments
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [completed, pending, refunded, failed]
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Payments list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /admin/payments/{id}:
    get:
      tags:
        - Admin - Payments
      summary: Get payment details
      operationId: getPayment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Payment'

  /admin/payments/{id}/refund:
    post:
      tags:
        - Admin - Payments
      summary: Refund payment
      operationId: refundPayment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - reason
              properties:
                amount:
                  type: number
                reason:
                  type: string
      responses:
        '200':
          description: Payment refunded
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      status:
                        type: string
                      refundAmount:
                        type: number
                      refundReason:
                        type: string
                      refundDate:
                        type: string
                        format: date-time

  # Dashboard
  /admin/dashboard/metrics:
    get:
      tags:
        - Admin - Dashboard
      summary: Get dashboard metrics
      operationId: getDashboardMetrics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dashboard metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DashboardMetrics'

  # File Upload
  /admin/uploads:
    post:
      tags:
        - Admin - Uploads
      summary: Upload image file
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - folder
              properties:
                file:
                  type: string
                  format: binary
                folder:
                  type: string
                  enum: [services, branches, blog, profile, staff]
      responses:
        '201':
          description: File uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                      id:
                        type: string
                      folder:
                        type: string
