# ========================================
# Stage 1: Build Stage
# ========================================
FROM node:20-alpine AS builder

# Metadata
LABEL stage=builder
LABEL app=spa-hackathon-frontend

# Install pnpm globally
RUN npm install -g pnpm@9

# Set working directory
WORKDIR /app

# Copy package files for caching
COPY package*.json pnpm-*.yaml ./
COPY apps/frontend/package*.json ./apps/frontend/

# Install dependencies with frozen lockfile
RUN pnpm install --frozen-lockfile --prefer-offline

# Copy source code
COPY apps/frontend ./apps/frontend
COPY tsconfig*.json ./

# Build application
WORKDIR /app/apps/frontend
RUN pnpm run build

# ========================================
# Stage 2: Runtime Stage
# ========================================
FROM nginx:1.27-alpine AS runtime

# Metadata
LABEL maintainer="Spa Hackathon Team"
LABEL app=spa-hackathon-frontend
LABEL version="1.0.0"

# Install curl for healthcheck
RUN apk add --no-cache curl

# Create nginx user and directories
RUN adduser -D -u 1001 nginx-user && \
    mkdir -p /var/cache/nginx /var/log/nginx /etc/nginx/ssl && \
    chown -R nginx-user:nginx-user /var/cache/nginx /var/log/nginx /usr/share/nginx/html

# Copy custom nginx config
COPY deploy/docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY deploy/docker/nginx/default.conf /etc/nginx/conf.d/default.conf

# Copy built assets from builder
COPY --from=builder --chown=nginx-user:nginx-user /app/apps/frontend/dist /usr/share/nginx/html

# Copy runtime env injection script
COPY deploy/docker/scripts/inject-env.sh /docker-entrypoint.d/40-inject-env.sh
RUN chmod +x /docker-entrypoint.d/40-inject-env.sh

# Switch to non-root user
USER nginx-user

# Expose port
EXPOSE 8080

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/healthz || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
