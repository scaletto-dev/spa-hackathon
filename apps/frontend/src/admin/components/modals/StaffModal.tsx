import React, { useState } from 'react';
import { XIcon, UploadIcon, SparklesIcon } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import { FormField, Input, Select, Textarea } from '../../../components/ui';
import { toast } from '../../../utils/toast';

interface StaffModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSuccess?: () => void;
}

export function StaffModal({ isOpen, onClose, onSuccess }: StaffModalProps) {
    const { t } = useTranslation('common');
    const [formData, setFormData] = useState({
        name: '',
        specialization: '',
        branch: '',
        startTime: '',
        endTime: '',
        bio: '',
    });

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleSelectChange = (name: string) => (value: string) => {
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleGenerateAIBio = () => {
        const bios = [
            `Chuy√™n vi√™n c√≥ h∆°n 5 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c ${
                formData.specialization || 'l√†m ƒë·∫πp'
            }. T·ªët nghi·ªáp t·ª´ H·ªçc vi·ªán Th·∫©m m·ªπ Qu·ªëc t·∫ø v·ªõi b·∫±ng Distinction. Lu√¥n c·∫≠p nh·∫≠t xu h∆∞·ªõng v√† k·ªπ thu·∫≠t m·ªõi nh·∫•t ƒë·ªÉ mang ƒë·∫øn tr·∫£i nghi·ªám t·ªët nh·∫•t cho kh√°ch h√†ng.`,
            `V·ªõi ƒëam m√™ v√† t·∫≠n t√¢m, ƒë√£ ph·ª•c v·ª• h√†ng ngh√¨n kh√°ch h√†ng h√†i l√≤ng. Ch·ª©ng ch·ªâ chuy√™n m√¥n t·ª´ c√°c t·ªï ch·ª©c uy t√≠n qu·ªëc t·∫ø. Phong c√°ch ph·ª•c v·ª• chuy√™n nghi·ªáp, t∆∞ v·∫•n t·∫≠n t√¨nh v√† hi·ªáu qu·∫£ cao.`,
            `Chuy√™n gia ${
                formData.specialization || 'l√†m ƒë·∫πp'
            } v·ªõi portfolio ·∫•n t∆∞·ª£ng. T·ª´ng ƒë√†o t·∫°o t·∫°i H√†n Qu·ªëc v√† Nh·∫≠t B·∫£n. K·ªπ nƒÉng giao ti·∫øp t·ªët, th·∫•u hi·ªÉu nhu c·∫ßu kh√°ch h√†ng, mang ƒë·∫øn d·ªãch v·ª• ƒë·∫≥ng c·∫•p 5 sao.`,
        ];
        const randomIndex = Math.floor(Math.random() * bios.length);
        const randomBio = bios[randomIndex] ?? bios[0] ?? '';
        setFormData((prev) => ({ ...prev, bio: randomBio }));
        toast.info('ƒê√£ t·∫°o ti·ªÉu s·ª≠ b·∫±ng AI');
    };

    const handleSubmit = () => {
        // Validation
        if (!formData.name.trim()) {
            toast.error(t('admin.staff.enterName'));
            return;
        }
        if (!formData.specialization) {
            toast.error(t('admin.staff.selectSpecialization'));
            return;
        }
        if (!formData.branch) {
            toast.error(t('admin.staff.selectBranch'));
            return;
        }
        if (!formData.startTime || !formData.endTime) {
            toast.error(t('admin.staff.enterWorkingHours'));
            return;
        }

        // Validate time range
        if (formData.startTime >= formData.endTime) {
            toast.error(t('admin.staff.endTimeAfterStart'));
            return;
        }

        // Mock: Simulate staff creation
        const newStaff = {
            id: Date.now().toString(),
            ...formData,
            rating: 5.0,
            totalAppointments: 0,
            status: 'active',
            joinedDate: new Date().toISOString(),
        };

        console.log('üë§ Mock: Created staff member:', newStaff);
        toast.success(`ƒê√£ th√™m chuy√™n vi√™n "${formData.name}" th√†nh c√¥ng! (Mocked)`);

        // Reset form
        setFormData({
            name: '',
            specialization: '',
            branch: '',
            startTime: '',
            endTime: '',
            bio: '',
        });

        onSuccess?.();
        onClose();
    };

    const specializationOptions = [
        { value: '', label: 'Ch·ªçn chuy√™n m√¥n' },
        { value: 'facial', label: 'Chuy√™n vi√™n chƒÉm s√≥c da' },
        { value: 'massage', label: 'Chuy√™n vi√™n massage' },
        { value: 'hair', label: 'Chuy√™n vi√™n t√≥c' },
        { value: 'nail', label: 'Chuy√™n vi√™n nail' },
    ];

    const branchOptions = [
        { value: '', label: 'Ch·ªçn chi nh√°nh' },
        { value: 'downtown', label: 'Chi nh√°nh Trung t√¢m' },
        { value: 'westside', label: 'Chi nh√°nh T√¢y' },
        { value: 'eastside', label: 'Chi nh√°nh ƒê√¥ng' },
    ];

    if (!isOpen) return null;
    return (
        <>
            <div className='!fixed !inset-0 !m-0 !p-0 bg-black/50 backdrop-blur-sm z-[9999]' onClick={onClose} />
            <div className='!fixed !inset-0 !m-0 !p-0 flex items-center justify-center z-[10000] pointer-events-none'>
                <div className='bg-white rounded-3xl shadow-2xl w-full max-w-2xl animate-in fade-in slide-in-from-bottom-4 max-h-[90vh] overflow-y-auto pointer-events-auto'>
                    <div className='bg-gradient-to-r from-pink-400 to-purple-400 p-6 rounded-t-3xl flex items-center justify-between sticky top-0'>
                        <h2 className='text-xl font-bold text-white'>Th√™m Chuy√™n vi√™n m·ªõi</h2>
                        <button onClick={onClose} className='p-1 hover:bg-white/20 rounded-full transition-colors'>
                            <XIcon className='w-6 h-6 text-white' />
                        </button>
                    </div>
                    <div className='p-6 space-y-4'>
                        <div className='flex justify-center'>
                            <div className='relative'>
                                <div className='w-32 h-32 rounded-full bg-gradient-to-br from-pink-100 to-purple-100 flex items-center justify-center border-4 border-white shadow-lg'>
                                    <UploadIcon className='w-8 h-8 text-gray-400' />
                                </div>
                                <button className='absolute bottom-0 right-0 w-10 h-10 rounded-full bg-gradient-to-r from-pink-400 to-purple-400 flex items-center justify-center shadow-lg'>
                                    <UploadIcon className='w-5 h-5 text-white' />
                                </button>
                            </div>
                        </div>
                        <div className='grid grid-cols-2 gap-4'>
                            <FormField label='H·ªç v√† t√™n' name='name' required>
                                <Input
                                    name='name'
                                    value={formData.name}
                                    onChange={handleChange}
                                    placeholder='Nh·∫≠p h·ªç v√† t√™n'
                                />
                            </FormField>

                            <FormField label='Chuy√™n m√¥n' name='specialization' required>
                                <Select
                                    name='specialization'
                                    value={formData.specialization}
                                    onChange={handleSelectChange('specialization')}
                                    options={specializationOptions}
                                    placeholder='Ch·ªçn chuy√™n m√¥n'
                                />
                            </FormField>
                        </div>

                        <FormField label='Chi nh√°nh' name='branch' required>
                            <Select
                                name='branch'
                                value={formData.branch}
                                onChange={handleSelectChange('branch')}
                                options={branchOptions}
                                placeholder='Ch·ªçn chi nh√°nh'
                            />
                        </FormField>

                        <FormField label='Gi·ªù l√†m vi·ªác' name='workingHours' required>
                            <div className='grid grid-cols-2 gap-4'>
                                <Input
                                    type='time'
                                    name='startTime'
                                    value={formData.startTime}
                                    onChange={handleChange}
                                    placeholder='Gi·ªù b·∫Øt ƒë·∫ßu'
                                />
                                <Input
                                    type='time'
                                    name='endTime'
                                    value={formData.endTime}
                                    onChange={handleChange}
                                    placeholder='Gi·ªù k·∫øt th√∫c'
                                />
                            </div>
                        </FormField>

                        <div>
                            <div className='flex items-center justify-between mb-2'>
                                <label className='block text-sm font-medium text-gray-700'>Ti·ªÉu s·ª≠</label>
                                <button
                                    type='button'
                                    onClick={handleGenerateAIBio}
                                    className='text-xs text-purple-600 hover:text-purple-700 flex items-center gap-1'
                                >
                                    <SparklesIcon className='w-3 h-3' />
                                    T·∫°o b·∫±ng AI
                                </button>
                            </div>
                            <FormField name='bio'>
                                <Textarea
                                    name='bio'
                                    value={formData.bio}
                                    onChange={handleChange}
                                    placeholder='Ti·ªÉu s·ª≠ v√† tr√¨nh ƒë·ªô chuy√™n m√¥n...'
                                    rows={4}
                                    maxLength={500}
                                    showCounter
                                />
                            </FormField>
                        </div>

                        <div className='flex gap-3 pt-4'>
                            <button
                                onClick={onClose}
                                className='flex-1 px-4 py-2 rounded-lg border border-pink-200 text-gray-700 hover:bg-pink-50 transition-colors'
                            >
                                H·ªßy
                            </button>
                            <button
                                onClick={handleSubmit}
                                className='flex-1 px-4 py-2 rounded-lg bg-gradient-to-r from-pink-400 to-purple-400 text-white hover:from-pink-500 hover:to-purple-500 transition-all shadow-sm'
                            >
                                Th√™m Chuy√™n vi√™n
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
}
